{"ast":null,"code":"import _asyncToGenerator from \"/Users/marinemichelot/Desktop/Aston/P1/gitcant/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FormControl, Validators } from '@angular/forms'; //Imports necessaires au formulaire reactifs et au bon fonctionnement du formulaire (validators)\n\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"ngx-toastr\";\n\nfunction LoginComponent_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \" Email Invalide\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \" Mot de Passe Invalide\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    //-------------------- CONSTRUCTEUR ----------------------------------------------\n    constructor(userService, router, builder, location, toastr) {\n      this.userService = userService;\n      this.router = router;\n      this.builder = builder;\n      this.location = location;\n      this.toastr = toastr;\n      this.submitted = false; //Necessaire à la gestion des erreurs (activation des validators)\n\n      this.msgError = \"\";\n      this.jwt = \"\";\n      this.secretKey = \"-KaPdSgVkXp2s5v8y/B?E(H+MbQeThWmZq3t6w9z$C&F)J@NcRfUjXn2r5u7x!A%\"; //CONFIGURATION DES VALIDATORS : EMAIL\n\n      this.email = new FormControl('', [Validators.required, Validators.email]); //CONFIGURATION DES VALIDATORS : MOT DE PASSE\n\n      this.password = new FormControl('', [Validators.required, Validators.minLength(5)]); //FORMATION DU FORMULAIRE REACTIF DE CONNEXION\n\n      this.loginForm = this.builder.group({\n        email: this.email,\n        password: this.password\n      });\n    } //-------------------- ON INIT ----------------------------------------------\n\n\n    ngOnInit() {} //-------------------- REFRESH DE LA PAGE ----------------------------------------------\n\n\n    refreshPage() {\n      //REFRESH\n      location.reload();\n    } //-------------------- CONNEXION ----------------------------------------------\n\n\n    login() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        //REQUETE ASYNCHRONE DE CONNEXION\n        try {\n          //REQUETE VERS LE SERVICE DES UTILISATEURS\n          let requeteLogin = yield _this.userService.login(_this.loginForm); //RECUPERATION DU TOKEN D'AUTHENTIFICATION\n\n          _this.jwt = requeteLogin.headers.get('Authorization'); //DECRYPTAGE DU TOKEN\n\n          let tokenUncrypte = jwt_decode(_this.jwt); //STOCKAGE DU JETON ET DES INFORMATIONS DE L'UTILISATEUR EN LOCAL\n\n          localStorage.setItem('token', _this.jwt);\n          localStorage.setItem('user', JSON.stringify(tokenUncrypte['user'])); //MESSAGE UTILISATEUR CONNECTÉ\n\n          _this.showGoodToaster(\"Connecté !\"); //REDIRECTION\n\n\n          _this.router.navigate(['homepage']); //REFRESH DE LA PAGE\n\n\n          setTimeout(_this.refreshPage, 2000);\n        } catch (error) {\n          //GESTION DES ERREURS ET MESSAGES D'ERREURS\n          if (error['status'] == 401) {\n            _this.showBadToaster(\"Identifiant ou Mot de Passe Incorrect :(\");\n          } else {\n            _this.showBadToaster('Chef, chef ! On a un problème :( ' + error['status'] + ' ' + error.error['exceptionMessage']);\n          }\n        }\n      })();\n    } //-------------------- OUBLIS DU MOT DE PASSE ----------------------------------------------\n\n\n    onResetPassword() {\n      //REDIRECTION\n      this.router.navigate(['resetPassword']);\n    } //-------------------- CREATION DE COMPTE ----------------------------------------------\n\n\n    onCreateNewAccount() {\n      //REDIRECTION\n      this.router.navigate(['createAccount']);\n    } //-------------------- FONCTIONS DES TOASTER ----------------------------------------------\n\n\n    showGoodToaster(message) {\n      this.toastr.success(message);\n    }\n\n    showBadToaster(message) {\n      this.toastr.error(message);\n    }\n\n    showCleverToaster(message) {\n      this.toastr.info(message);\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Location), i0.ɵɵdirectiveInject(i5.ToastrService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 22,\n    vars: 7,\n    consts: [[\"id\", \"body\"], [\"id\", \"loginForm\"], [3, \"formGroup\", \"ngSubmit\"], [\"id\", \"inputs\"], [1, \"input\"], [\"type\", \"text\", \"placeholder\", \"Email\", 3, \"formControl\"], [4, \"ngIf\"], [\"type\", \"password\", \"placeholder\", \"Mot de Passe\", 3, \"formControl\"], [3, \"disabled\"], [\"id\", \"boutonResetCreate\"], [3, \"click\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"main\", 0);\n        i0.ɵɵelementStart(1, \"h1\");\n        i0.ɵɵtext(2, \"Connexion\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelementStart(4, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, LoginComponent_p_8_Template, 2, 0, \"p\", 6);\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelement(10, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, LoginComponent_p_11_Template, 2, 0, \"p\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 8);\n        i0.ɵɵtext(13, \" Se Connecter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 9);\n        i0.ɵɵelementStart(17, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_17_listener() {\n          return ctx.onResetPassword();\n        });\n        i0.ɵɵtext(18, \"Mot de Passe perdu ?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementStart(20, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_20_listener() {\n          return ctx.onCreateNewAccount();\n        });\n        i0.ɵɵtext(21, \"Cr\\u00E9er un compte\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.email);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.email.dirty && (ctx.email.hasError(\"required\") || ctx.email.hasError(\"email\")));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.password);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.password.dirty && ctx.password.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.email.hasError(\"required\") || ctx.email.hasError(\"email\") || ctx.password.hasError(\"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.msgError);\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i4.NgIf],\n    styles: [\"h1[_ngcontent-%COMP%]{color:#175242;text-align:center;font-size:4vh;padding-top:1vh;padding-bottom:1vh;margin:2vh}#body[_ngcontent-%COMP%]{margin:auto;display:flex;flex-direction:column;justify-content:center;align-items:center}#loginForm[_ngcontent-%COMP%]{background-color:#86cb92;text-align:center;color:#175242;font-size:1em;border-radius:6px}input[_ngcontent-%COMP%]{border:#86CB92;margin:1vh;font-size:2.5vh}#inputs[_ngcontent-%COMP%]{margin-top:3vh;display:flex;flex-direction:column;align-items:center;text-align:center}form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:5vh 1vh 1vh;color:#f18f01;background-color:#175242;border:#175242;border-radius:3px;padding:1.5vw;font-size:3vh}form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:disabled{background-color:#7a827d}p[_ngcontent-%COMP%]{color:red}#boutonResetCreate[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:space-around;margin-top:2vh}#boutonResetCreate[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:.8em;border-radius:6px;border:none;font-weight:900;cursor:pointer;background-color:#175242;color:#f1f1f1;margin:1em auto;width:80%}.input[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;justify-content:space-between;flex-wrap:wrap}@media screen and (min-width: 900px) and (max-width: 1020px){#body[_ngcontent-%COMP%]{width:80%}}@media screen and (min-width: 300px) and (max-width: 900px){#body[_ngcontent-%COMP%]{margin:auto;padding:0;background:none;border:none;top:10vh;display:flex;flex-direction:column;justify-content:center;align-items:center}#loginForm[_ngcontent-%COMP%]{width:100%;left:0;margin-left:0}}@media screen and (min-width: 300px) and (max-width: 590px){#body[_ngcontent-%COMP%]{width:100%;margin:0;padding:0;left:0}#boutonResetCreate[_ngcontent-%COMP%]{flex-direction:column}}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}